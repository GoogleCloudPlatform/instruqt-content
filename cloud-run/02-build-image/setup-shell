#!/bin/bash
# Copyright 2019 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

### Challenge objective
# Build a Docker container using Cloud Build

export IMAGE_TAG="gcr.io/$(gcloud config get-value project)/fortune"
echo "export IMAGE_TAG=$IMAGE_TAG" >> /root/.instruqt/.customrc

cat <<EOF > /root/.instruqt/help.txt
To start the service on *Cloud Run*, you need a container image.

We want to build an application from the Dockerfile in your local
source, but we don't have docker installed locally. We can build it 
in the cloud with *Cloud Build*.

Cloud Build will build any directory with a Dockerfile, when you 
add the -t option with an image name.

Your task: using "gcloud builds submit", push a build to Cloud Build 
and tag the container image with the name contained in the 
environment variable "\$IMAGE_TAG"


Hit the "Check" button when you are done.

EOF

cat <<EOF > /root/.instruqt/hint.txt
If you run "gcloud builds submit" in a directory with a Dockerfile, 
it will build a container image. 

Make sure to use the "-t option" to tag the image. 

You do not need to create a "cloudbuild.yaml"
EOF

set-workdir /home 


