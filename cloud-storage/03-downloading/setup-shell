#!/bin/bash
# Copyright 2019 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

rm /root/foo.txt

cat <<EOF > /root/.instruqt/help.txt
Your Quest
-------------------------------

By modifying "python/challenge.py", "node/challenge.js", "go/challenge.go", or using gsutil
directly, download the image we've hidden in \$BUCKET_NAME. Using "print-png",
view the image, and type "answer" when you're ready to tell us what it is.

Hit the "Check" button when you are done.

Coding Your Solution
-------------------------------

If you run 'ls', you will see folders for each supported language; currently
python, node (JavaScript), and go.

Once you're ready to write some code, use vim, nano, or emacs to edit the
challenge file in one of these directories, then use the given interpreter
to execute it.

Using gsutil
-------------------------------

You will also find the gsutil utility installed, and the environment variable
\$BUCKET_NAME set. Run "gsutil --help" for information about this command.
EOF

cat <<EOF > /root/.instruqt/hint.txt
Hint:
----

try running:

gsutil cp gs://... .

replacing "..." with the remote filename.
EOF

cat <<EOF > node/challenge.js
// Imports the Google Cloud client library
const {Storage} = require('@google-cloud/storage')

// Globally unique bucket name (don't change this).
const bucketName = process.env.BUCKET_NAME

// An authenticated storage API client.
const storage = new Storage()

async function downloadImage () {
  // put your code here for downloading the .png image stored in
  // bucketName.
  const [files] = await storage.bucket(bucketName).getFiles();

  files.forEach(async (file) => {
    // detecting the appropriate filename, use the method:
    // "await storage" to download the file.
    //   .bucket(bucketName)
    //   .file(srcFilename)
    //   .download({destination: './local.example'});
  });
}

downloadImage()
EOF

mkdir /root/python

cat <<EOF > python/challenge.py
import os
from google.cloud import storage

"""The bucket has already been created and an additional file has
   been uploaded.  Download and view the .png file"""
def download_blob():
    storage_client = storage.Client()
    bucket = storage_client.get_bucket(os.environ['BUCKET_NAME'])

    blobs = bucket.list_blobs()

    for blob in blobs:
        print(blob.name)
        # Add code to download the .png file
        if blob.name[-3:] == 'png':
            # using the method blob.download_to_filename(destination_file_name)
			# to download the appropriate file.

if __name__ == '__main__':
	download_blob()
EOF

# go code samples and stubbed out challenge.
cat <<EOF > go/challenge.go
package main

import (
	"cloud.google.com/go/storage"
	"context"
	"google.golang.org/api/iterator"
	"io/ioutil"
	"log"
	"os"
	"strings"
)

func main() {
	ctx := context.Background()

	client, err := storage.NewClient(ctx)
	if err != nil {
		log.Fatal(err)
	}

	bucketName := os.Getenv("BUCKET_NAME")
	if err := download(client, bucketName); err != nil {
		log.Fatalf("Cannot write object: %v", err)
	}
}

func download(client *storage.Client, bucketName string) error {
	ctx := context.Background()
	it := client.Bucket(bucketName).Objects(ctx, nil)
	for {
		oattrs, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			return err
		}

		if strings.Index(oattrs.Name, "png") != -1 {
			//
			// logic for writing file to disk.
			//
			// use the code below as a starting point.
			// rc, err := client.Bucket(bucketName).Object(oattrs.Name).NewReader(ctx)
			// if err != nil {
			//	return err
			// }
			// defer rc.Close()
			// data, err := ioutil.ReadAll(rc)
			// if err != nil {
			//	return err
			// }
			// err := ioutil.WriteFile("challenge.png", data, 0644)
			// if err != nil {
			//return err
			// }
		}
	}

	return nil
}
EOF

# configure a few additional bins for the user.
cat <<EOF > /root/.instruqt/choices.txt
What was the .png an image of?
horse
television
house
person
dog
orange
pizza
EOF

# Remove hint in hard mode
if [[ "$INSTRUQT_DIFFICULTY" = "hard" ]]; then
    echo "Sorry, no hints in HARD mode" > /root/hint.txt
fi
