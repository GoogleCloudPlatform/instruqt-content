#!/bin/bash

cat <<EOF > challenge.js
// Imports the Google Cloud client library
const {Storage} = require('@google-cloud/storage')

// Globally unique bucket name (don't change this).
const bucketName = "bucket-$(cat /usr/local/lib/UUID)"

// An authenticated storage API client.
const storage = new Storage()

async function uploadFile () {
  // Implement the logic for uploading the file ./foo.txt to the remote bucket,
  // with the name bar.txt.
}

uploadFile()
EOF

cat <<EOF > foo.txt
hello world!
EOF

cat <<EOF > /usr/local/lib/google-cloud-sdk/bin/check-for-file.js
const {Storage} = require('@google-cloud/storage')
const storage = new Storage()
const name = process.argv[2]
const bucketName = process.env.BUCKET_NAME
async function checkForFile () {
    const [files] = await storage.bucket(bucketName).getFiles()
    let foundFile = false
    files.forEach(file => {
        if (file.name === name) foundFile = true
    });
    if (!foundFile) {
        console.error('could not find file ' + name)
        process.exit(1)
    }
}
checkForFile()
EOF

cat <<EOF > code-sample.js
// Imports the Google Cloud client library
const {Storage} = require('@google-cloud/storage');

// Creates a client
const storage = new Storage();

/**
 * TODO(developer): Uncomment the following lines before running the sample.
 */
// const bucketName = 'Name of a bucket, e.g. my-bucket';
// const filename = 'Local file to upload, e.g. ./local/path/to/file.txt';

// Uploads a local file to the bucket.
await storage.bucket(bucketName).upload(filename, {
  // Support for HTTP requests made with `Accept-Encoding: gzip`
  gzip: true,
  // destination: 'destination-filename' // defaults to filename.
  metadata: {
    // Enable long-lived HTTP caching headers
    // Use only if the contents of the file will never change
    // (If the contents will change, use cacheControl: 'no-cache')
    cacheControl: 'public, max-age=31536000',
  },
});

console.log(`${filename} uploaded to ${bucketName}.`);

// don't forget to run your code when it's ready:
// node challenge.js
EOF
