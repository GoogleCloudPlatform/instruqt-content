#!/bin/bash
# Copyright 2019 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

rm /root/foo.txt

# setup translations
source /etc/profile.d/instruqt-env.sh
/usr/bin/python2.7 /usr/local/bin/csvtoenv /usr/local/lib/shell-translations.csv >> /root/.translationsenv
source /root/.translationsenv

# alias answer to multiple choice quiz
alias answer=terminal-quiz

cat <<EOF > help.txt
$DOWNLOADING_HELP_TEXT
EOF

cat <<EOF > hint.txt
$DOWNLOADING_HINT_TEXT
EOF

cat <<EOF > node/challenge.js
$CREATING_NODE_COMMENTS_1
const {Storage} = require('@google-cloud/storage')

$CREATING_NODE_COMMENTS_2
const bucketName = process.env.BUCKET_NAME

$CREATING_NODE_COMMENTS_3
const storage = new Storage()

async function downloadImage () {
  $DOWNLOADING_NODE_COMMENTS_1
  $DOWNLOADING_NODE_COMMENTS_2
  const [files] = await storage.bucket(bucketName).getFiles();

  files.forEach(async (file) => {
    $DOWNLOADING_NODE_COMMENTS_3
    $DOWNLOADING_NODE_COMMENTS_4
    //   .bucket(bucketName)
    //   .file(srcFilename)
    //   .download({destination: './local.example'});
  });
}

downloadImage()
EOF

cat <<EOF > /usr/local/lib/goog/bin/check-answer.js
const {readFileSync} = require('fs')
const lines = readFileSync('/root/answer.txt', 'utf8').trim().split('\n')
const lastLine = lines[lines.length - 1].toLowerCase()
if (lastLine !== 'dog' && lastLine !== 'çŠ¬') {
    console.error('incorrect answer')
    process.exit(1)
}
EOF

mkdir /root/python

cat <<EOF > python/challenge.py
import os
from google.cloud import storage

$DOWNLOADING_PYTHON_COMMENTS_1

def download_blob():
	storage_client = storage.Client()
	bucket = storage_client.get_bucket(os.environ['BUCKET_NAME'])

	blobs = bucket.list_blobs()

	for blob in blobs:
		print(blob.name)
		$DOWNLOADING_PYTHON_COMMENTS_2
		if blob.name[-3:] == 'png':
			$DOWNLOADING_PYTHON_COMMENTS_3
			$DOWNLOADING_PYTHON_COMMENTS_4

if __name__ == '__main__':
	download_blob()

EOF

# go code samples and stubbed out challenge.
cat <<EOF > go/challenge.go
package main

import (
	"cloud.google.com/go/storage"
	"context"
	"google.golang.org/api/iterator"
	"io/ioutil"
	"log"
	"os"
	"strings"
)

func main() {
	ctx := context.Background()

	// [START setup]
	client, err := storage.NewClient(ctx)
	if err != nil {
		log.Fatal(err)
	}
	// [END setup]

	$DOWNLOADING_GO_COMMENT_1
	bucketName := os.Getenv("BUCKET_NAME")
	if err := download(client, bucketName); err != nil {
		log.Fatalf("Cannot write object: %v", err)
	}
}

func download(client *storage.Client, bucketName string) error {
	ctx := context.Background()
	it := client.Bucket(bucketName).Objects(ctx, nil)
	for {
		oattrs, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			return err
		}

		if strings.Index(oattrs.Name, "png") != -1 {
			//
			$DOWNLOADING_GO_COMMENT_2
			//
			$DOWNLOADING_GO_COMMENT_3
			// rc, err := client.Bucket(bucketName).Object(oattrs.Name).NewReader(ctx)
			// if err != nil {
			//	return err
			// }
			// defer rc.Close()
			// data, err := ioutil.ReadAll(rc)
			// if err != nil {
			//	return err
			// }
			// err := ioutil.WriteFile("challenge.png", data, 0644)
			// if err != nil {
			//return err
			// }
		}
	}

	return nil
}
EOF

# configure a few additional bins for the user.
mkdir /root/.quiz
cat <<EOF > /root/choices.txt
$CREATING_QUIZ_ANSWER
EOF

# Remove hint in hard mode
if [[ "$INSTRUQT_DIFFICULTY" = "hard" ]]; then
    echo "$CREATING_NODE_HINT_TOOLTIP" > /root/hint.txt
fi
