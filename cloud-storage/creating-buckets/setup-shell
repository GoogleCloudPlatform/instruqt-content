#!/bin/bash
# Copyright 2019 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ensure utf-8 is configured:
echo 'set encoding=utf-8' >> ~/.vimrc

# setup aliases.
echo "alias python=python3" >> /root/.bashrc

# create a folder for placing our check scripts in:
mkdir -p /usr/local/lib/goog/bin

# output and load GCP credentials.
printf "if [ ! -z \"\$INSTRUQT_GCP_PROJECT_CLOUD_STORAGE_SERVICE_ACCOUNT_KEY\" ]\nthen\n  node -e \"console.info(Buffer.from(process.env.INSTRUQT_GCP_PROJECT_CLOUD_STORAGE_SERVICE_ACCOUNT_KEY, 'base64').toString('utf8'))\" > /root/.config/gcloud/default_credentials.json\nfi\n" >> ~/.bashrc
echo "gsutil cp /usr/local/lib/buddy.png gs://bucket-\$(cat /usr/local/lib/UUID)/challenge.png &>/dev/null" >> /root/.bashrc
echo "export GOOGLE_APPLICATION_CREDENTIALS=/root/.config/gcloud/default_credentials.json" >> /root/.bashrc
echo "export GOOGLE_CLOUD_PROJECT=\$(cat /root/.config/gcloud/default_credentials.json | json project_id)" >> /root/.bashrc

echo $(/usr/local/bin/uuid) > /usr/local/lib/UUID
echo "export BUCKET_NAME=bucket-\$(cat /usr/local/lib/UUID)" >> /root/.bashrc

cat <<EOF > /usr/local/bin/print-png
tiv -256 "\$@"
EOF
chmod 755 /usr/local/bin/print-png

cat <<EOF > help.txt
$CREATING_HELP_TEXT
EOF

cat <<EOF > hint.txt
$CREATING_HINT_TEXT
EOF

# Node.js examples.

mkdir node

cat <<EOF > node/challenge.js
$CREATING_NODE_COMMENTS_1
const {Storage} = require('@google-cloud/storage')

$CREATING_NODE_COMMENTS_2
const bucketName = process.env.BUCKET_NAME

$CREATING_NODE_COMMENTS_3
const storage = new Storage()

async function createBucket () {
  $CREATING_NODE_COMMENTS_4
  $CREATING_NODE_COMMENTS_5
  $CREATING_NODE_COMMENTS_6
}

createBucket()
EOF

# go examples.

mkdir /root/go

cat <<EOF > go/challenge.go
package main

import (
	"cloud.google.com/go/storage"
	"context"
	"fmt"
	"log"
	"os"
)

func main() {
	ctx := context.Background()

	projectID := os.Getenv("GOOGLE_CLOUD_PROJECT")

	// [START setup]
	client, err := storage.NewClient(ctx)
	if err != nil {
		log.Fatal(err)
	}
	// [END setup]

	$DOWNLOADING_GO_COMMENT_1
	name := os.Getenv("BUCKET_NAME")
	if err := create(client, projectID, name); err != nil {
		log.Fatal(err)
	}
	fmt.Printf("created bucket: %v\n", name)
}

func create(client *storage.Client, projectID, bucketName string) error {
	ctx := context.Background()
	$CREATING_GO_COMMENTS_1
	$CREATING_GO_COMMENTS_2
	$CREATING_GO_COMMENTS_3
	return nil
}
EOF

# challenge validation scripts.

cat <<EOF > /usr/local/lib/goog/bin/require-n-buckets.js
const {Storage} = require('@google-cloud/storage');
const storage = new Storage();
const n = Number(process.argv[2])
async function listBuckets () {
    const [buckets] = await storage.getBuckets();
    if (buckets.length < n) {
        console.error('expected ' + n + ' buckets, got ' + buckets.length)
        process.exit(1)
    }
}
listBuckets()
EOF

#python challenge

mkdir /root/python

cat <<EOF > python/challenge.py
import os
from google.cloud import storage

def create_bucket():
  storage_client = storage.Client()
  bucket_name = os.environ['BUCKET_NAME']
  $CREATING_PYTHON_COMMENTS_1
  $CREATING_PYTHON_COMMENTS_2
  $CREATING_PYTHON_COMMENTS_3

if __name__ == "__main__":
    create_bucket()

EOF

cat <<EOF > /usr/local/bin/run-all
#!/bin/bash
export GOOGLE_CLOUD_PROJECT=\$(cat /root/.config/gcloud/default_credentials.json | /usr/local/lib/node_modules/.bin/json project_id)
export GOPATH=/usr/local/lib
cd /root/node && node challenge.js &>/dev/null
cd /root/python && python3 challenge.py &>/dev/null
cd /root/go && /usr/local/bin/go run challenge.go &>/dev/null
exit 0
EOF
chmod 755 /usr/local/bin/run-all

# Remove hint in hard mode
if [[ "$INSTRUQT_DIFFICULTY" = "hard" ]]; then
    echo "$CREATING_NODE_HINT_TOOLTIP" > /root/hint.txt
fi
