#!/bin/bash

# setup aliases.
echo "alias python=python3" >> /root/.bashrc
echo "alias help=cat /root/help.txt | more"

# gcloud installs with the CHECKSUM not present in all
# necessry folders *shrug emoji*.
cp /usr/local/lib/google-cloud-sdk/platform/gsutil/CHECKSUM /usr/local/lib/google-cloud-sdk/platform/gsutil/gslib/CHECKSUM

# output and load GCP credentials.
echo "cat /root/help.txt" >> /root/.bashrc
printf "if [ ! -z \"\$INSTRUQT_GCP_PROJECT_CLOUD_STORAGE_SERVICE_ACCOUNT_KEY\" ]\nthen\n  node -e \"console.info(Buffer.from(process.env.INSTRUQT_GCP_PROJECT_CLOUD_STORAGE_SERVICE_ACCOUNT_KEY, 'base64').toString('utf8'))\" > /root/.config/gcloud/default_credentials.json\nfi\n" >> ~/.bashrc
echo "/usr/local/lib/google-cloud-sdk/bin/gcloud auth activate-service-account --key-file=/root/.config/gcloud/default_credentials.json &>/dev/null" >> /root/.bashrc
echo "gsutil cp /usr/local/lib/buddy.png gs://bucket-\$(cat /usr/local/lib/UUID)/challenge.png &>/dev/null" >> /root/.bashrc
printf "if [ ! -z \"\$INSTRUQT_GCP_PROJECT_CLOUD_STORAGE_PROJECT_ID\" ]\nthen\n  /usr/local/lib/google-cloud-sdk/bin/gcloud config set project \$INSTRUQT_GCP_PROJECT_CLOUD_STORAGE_PROJECT_ID &>/dev/null\nfi\n" >> ~/.bashrc
echo "export GOOGLE_APPLICATION_CREDENTIALS=/root/.config/gcloud/default_credentials.json" >> /root/.bashrc
echo "ln -sf /usr/local/lib/google-cloud-sdk/bin/gcloud /usr/local/bin/gcloud" >> /root/.bashrc
echo "ln -sf /usr/local/lib/google-cloud-sdk/bin/gsutil /usr/local/bin/gsutil" >> /root/.bashrc
echo "export GOOGLE_CLOUD_PROJECT=\$(cat /root/.config/gcloud/default_credentials.json | json project_id)" >> /root/.bashrc

echo $(/usr/local/bin/uuid) > /usr/local/lib/UUID
echo "export BUCKET_NAME=bucket-\$(cat /usr/local/lib/UUID)" >> /root/.bashrc

cat <<EOF > /usr/local/bin/print-png
tiv -256 "\$@"
EOF
chmod 755 /usr/local/bin/print-png

cat <<EOF > help.txt
# Your Quest
-------------------------------

By modifying python/challeng.py, node/challenge.js, go/challenge.go, or using gsutil directly, create a bucket named \$BUCKET_NAME.

If you use python, node, or go, ensure that you run your application (with python, node, or go run respectively).

Feeling stuck? run gsutil --help, or cat help.txt.

Hit the "Check" button when you are done.

Coding Your Solution
-------------------------------

If you run 'ls', you will see folders for each supported language; currently
python, node (JavaScript), and go.

Use 'cd' to enter one of these folders. There will be a file with the name
'code-sample' and a file with the name 'challenge' (with an extension
corresponding to the language you're using).

If you need help getting started, use 'cat' to display the code sample.

Once you're ready to write some code, use vim, nano, or emacs to edit the
challenge file.

Before clicking the "Check" button, run your application with node, go, or
Python.

# Using gsutil
-------------------------------

You will also find the gsutil utility installed, and the environment variable
\$BUCKET_NAME set. Run "gsutil --help" for information about this command.
EOF

# Node.js examples.

mkdir node

cat <<EOF > node/challenge.js
// Imports the Google Cloud client library
const {Storage} = require('@google-cloud/storage')

// Globally unique bucket name (don't change this).
const bucketName = process.env.BUCKET_NAME

// An authenticated storage API client.
const storage = new Storage()

async function createBucket () {
  // Implement the logic for creating a bucket
  // named bucketName.
}

createBucket()
EOF

cat <<EOF > node/code-sample.js
// [START storage_create_bucket]
// Imports the Google Cloud client library
const {Storage} = require('@google-cloud/storage');

// Creates a client
const storage = new Storage();

/**
* TODO(developer): Uncomment the following line before running the sample.
*/
// const bucketName = 'Name of a bucket, e.g. my-bucket';

// Creates a new bucket in the Asia region with the coldline default storage
// class. Leave the second argument blank for default settings.
//
// For default values see: https://cloud.google.com/storage/docs/locations and
// https://cloud.google.com/storage/docs/storage-classes
await storage.createBucket(bucketName, {
  location: 'ASIA',
  storageClass: 'COLDLINE',
});

console.log(`Bucket ${bucketName} created.`);
// [END storage_create_bucket]

// don't forget to run your code when it's ready:
// node challenge.js
EOF

# go examples.

mkdir /root/go

cat <<EOF > go/challenge.go
package main

import (
	"cloud.google.com/go/storage"
	"context"
	"fmt"
	"log"
	"os"
)

func main() {
	ctx := context.Background()

	projectID := os.Getenv("GOOGLE_CLOUD_PROJECT")

	// [START setup]
	client, err := storage.NewClient(ctx)
	if err != nil {
		log.Fatal(err)
	}
	// [END setup]

	// Give the bucket a unique name.
	name := os.Getenv("BUCKET_NAME")
	if err := create(client, projectID, name); err != nil {
		log.Fatal(err)
	}
	fmt.Printf("created bucket: %v\n", name)
}

func create(client *storage.Client, projectID, bucketName string) error {
	ctx := context.Background()

	return nil
}
EOF

cat <<EOF > go/code-sample.go
bucket := client.Bucket(bucketName)
if err := bucket.Create(ctx, projectID, &storage.BucketAttrs{
  // optional configuration variables, such as storage type
  // and data-center location.
  // StorageClass: "COLDLINE",
  // Location:     "asia",
}); err != nil {
  return err
}
EOF

# challenge validation scripts.

cat <<EOF > /usr/local/lib/google-cloud-sdk/bin/require-n-buckets.js
const {Storage} = require('@google-cloud/storage');
const storage = new Storage();
const n = Number(process.argv[2])
async function listBuckets () {
    const [buckets] = await storage.getBuckets();
    if (buckets.length < n) {
        console.error('expected ' + n + ' buckets, got ' + buckets.length)
        process.exit(1)
    }
}
listBuckets()
EOF

#python challenge

mkdir /root/python

cat <<EOF > python/challenge.py
import os
from google.cloud import storage

def create_bucket():
    storage_client = storage.Client()
    bucket_name = os.environ['BUCKET_NAME']
    
    # create a bucket
    
if __name__ == "__main__":
    create_bucket()

EOF

cat <<EOF > python/code-sample.py
def create_bucket():
    storage_client = storage.Client()
    bucket = storage_client.create_bucket(bucket_name)
    print('Bucket {} created'.format(bucket.name))
EOF

# configure a few additional bins for the user.
mkdir /root/.quiz
cat <<EOF > /root/.quiz/choices.txt
What was the .png an image of?
horse
television
house
person
dog
orange
pizza
EOF

EOF

cat <<EOF > /usr/local/bin/answer
/usr/local/bin/terminal-quiz --exit-message="Click the 'Check' button if you're happy with your answer"
EOF
chmod 755 /usr/local/bin/answer
