#!/bin/bash

# setup aliases.
echo "alias python=python3" >> /root/.bashrc
echo "alias help=/usr/local/bin/help" >> /root/.bashrc

# gcloud installs with the CHECKSUM not present in all
# necessry folders *shrug emoji*.
cp /usr/local/lib/google-cloud-sdk/platform/gsutil/CHECKSUM /usr/local/lib/google-cloud-sdk/platform/gsutil/gslib/CHECKSUM

# output and load GCP credentials.
echo "cat /root/help.txt" >> /root/.bashrc
printf "if [ ! -z \"\$INSTRUQT_GCP_PROJECT_CLOUD_STORAGE_SERVICE_ACCOUNT_KEY\" ]\nthen\n  node -e \"console.info(Buffer.from(process.env.INSTRUQT_GCP_PROJECT_CLOUD_STORAGE_SERVICE_ACCOUNT_KEY, 'base64').toString('utf8'))\" > /root/.config/gcloud/default_credentials.json\nfi\n" >> ~/.bashrc
echo "/usr/local/lib/google-cloud-sdk/bin/gcloud auth activate-service-account --key-file=/root/.config/gcloud/default_credentials.json &>/dev/null" >> /root/.bashrc
echo "gsutil cp /usr/local/lib/buddy.png gs://bucket-\$(cat /usr/local/lib/UUID)/challenge.png &>/dev/null" >> /root/.bashrc
printf "if [ ! -z \"\$INSTRUQT_GCP_PROJECT_CLOUD_STORAGE_PROJECT_ID\" ]\nthen\n  /usr/local/lib/google-cloud-sdk/bin/gcloud config set project \$INSTRUQT_GCP_PROJECT_CLOUD_STORAGE_PROJECT_ID &>/dev/null\nfi\n" >> ~/.bashrc
echo "export GOOGLE_APPLICATION_CREDENTIALS=/root/.config/gcloud/default_credentials.json" >> /root/.bashrc
echo "ln -sf /usr/local/lib/google-cloud-sdk/bin/gcloud /usr/local/bin/gcloud" >> /root/.bashrc
echo "ln -sf /usr/local/lib/google-cloud-sdk/bin/gsutil /usr/local/bin/gsutil" >> /root/.bashrc
echo "export GOOGLE_CLOUD_PROJECT=\$(cat /root/.config/gcloud/default_credentials.json | json project_id)" >> /root/.bashrc

echo $(/usr/local/bin/uuid) > /usr/local/lib/UUID
echo "export BUCKET_NAME=bucket-\$(cat /usr/local/lib/UUID)" >> /root/.bashrc

cat <<EOF > /usr/local/bin/print-png
tiv -256 "\$@"
EOF
chmod 755 /usr/local/bin/print-png

cat <<EOF > help.txt
# Your Quest
-------------------------------

By modifying python/challenge.py, node/challenge.js, go/challenge.go, or using gsutil directly, create a bucket named \$BUCKET_NAME.

Coding Your Solution
-------------------------------

If you run 'ls', you will see folders for each supported language; currently
python, node (JavaScript), and go.

Once you're ready to write some code, use vim, nano, or emacs to edit the
challenge file in one of these directories.

# Using gsutil
-------------------------------

You will also find the gsutil utility installed, and the environment variable
\$BUCKET_NAME set. Run "gsutil --help" for information about this command.
EOF

cat <<EOF > hint.txt
Hint:
----

try running: 

gsutil mb gs://...

replacing "..." with the appropriate bucket name.
EOF

# Node.js examples.

mkdir node

cat <<EOF > node/challenge.js
// Imports the Google Cloud client library
const {Storage} = require('@google-cloud/storage')

// Globally unique bucket name (don't change this).
const bucketName = process.env.BUCKET_NAME

// An authenticated storage API client.
const storage = new Storage()

async function createBucket () {
  // there is a method called createBucket on the Storage
  // class which takes the argument bucketName.
  // create a bucket bucketName.
}

createBucket()
EOF

# go examples.

mkdir /root/go

cat <<EOF > go/challenge.go
package main

import (
	"cloud.google.com/go/storage"
	"context"
	"fmt"
	"log"
	"os"
)

func main() {
	ctx := context.Background()

	projectID := os.Getenv("GOOGLE_CLOUD_PROJECT")

	// [START setup]
	client, err := storage.NewClient(ctx)
	if err != nil {
		log.Fatal(err)
	}
	// [END setup]

	// Give the bucket a unique name.
	name := os.Getenv("BUCKET_NAME")
	if err := create(client, projectID, name); err != nil {
		log.Fatal(err)
	}
	fmt.Printf("created bucket: %v\n", name)
}

func create(client *storage.Client, projectID, bucketName string) error {
	ctx := context.Background()
	// using the methods: client.Bucket and
	// bucket.Create(ctx, projectID, &storage.BucketAttrs{}) create
	// a bucket named bucketName.
	return nil
}
EOF

# challenge validation scripts.

cat <<EOF > /usr/local/lib/google-cloud-sdk/bin/require-n-buckets.js
const {Storage} = require('@google-cloud/storage');
const storage = new Storage();
const n = Number(process.argv[2])
async function listBuckets () {
    const [buckets] = await storage.getBuckets();
    if (buckets.length < n) {
        console.error('expected ' + n + ' buckets, got ' + buckets.length)
        process.exit(1)
    }
}
listBuckets()
EOF

#python challenge

mkdir /root/python

cat <<EOF > python/challenge.py
import os
from google.cloud import storage

def create_bucket():
  storage_client = storage.Client()
  bucket_name = os.environ['BUCKET_NAME']
  # using the method create_bucket on storage_client,
  # which takes the argument bucket_name, create a
  # cloud storage bucket.

if __name__ == "__main__":
    create_bucket()

EOF

# configure a few additional bins for the user.
mkdir /root/.quiz
cat <<EOF > /root/.quiz/choices.txt
What was the .png an image of?
horse
television
house
person
dog
orange
pizza
EOF

cat <<EOF > /usr/local/bin/run-all
#!/bin/bash
export GOOGLE_CLOUD_PROJECT=\$(cat /root/.config/gcloud/default_credentials.json | /usr/local/lib/node_modules/.bin/json project_id)
export GOPATH=/usr/local/lib
cd /root/node && node challenge.js &>/dev/null
cd /root/python && python3 challenge.py &>/dev/null
cd /root/go && /usr/local/bin/go run challenge.go &>/dev/null
exit 0
EOF
chmod 755 /usr/local/bin/run-all


cat <<EOF > /usr/local/bin/answer
/usr/local/bin/terminal-quiz --exit-message="Click the 'Check' button if you're happy with your answer"
EOF
chmod 755 /usr/local/bin/answer

cat <<EOF > /usr/local/bin/help
#!/bin/bash
cat /root/help.txt | more
EOF
chmod 755 /usr/local/bin/help

cat <<EOF > /usr/local/bin/hint
#!/bin/bash
cat /root/hint.txt | more
EOF
chmod 755 /usr/local/bin/hint
