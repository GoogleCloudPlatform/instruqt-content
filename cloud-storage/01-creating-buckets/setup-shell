#!/bin/bash
# Copyright 2019 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ensure utf-8 is configured:
echo 'set encoding=utf-8' >> ~/.vimrc

# setup aliases.
echo "alias python=python3" >> /root/.bashrc

# create a folder for placing our check scripts in:
mkdir -p /usr/local/lib/goog/bin

/usr/local/bin/uuid > /usr/local/lib/UUID
echo "export BUCKET_NAME=bucket-\$(cat /usr/local/lib/UUID)" >> /root/.bashrc

cat <<EOF > /usr/local/bin/print-png
tiv -256 "\$@"
EOF
chmod 755 /usr/local/bin/print-png

cat <<EOF > /root/.instruqt/help.txt
By modifying "python/challenge.py", "node/challenge.js", "go/challenge.go", or using gsutil directly, create a bucket named \$BUCKET_NAME.

Hit the "Check" button when you are done.

Coding Your Solution

If you run 'ls', you'll see folders for each supported language; currently
python, node (JavaScript), and go.

Once you're ready to write some code, use vim, nano, or emacs to edit the
challenge file in one of these directories.

To debug your answer, use the command "node", "python", or "go run", to execute your program.

Using gsutil
-------------------------------

You'll also find the gsutil utility installed, and the environment variable
\$BUCKET_NAME set. Run "gsutil --help" for information about this command."
EOF

cat <<EOF > /root/.instruqt/hint.txt
The easiest way to solve this challenge is to use the "gsutil" command
EOF

# Node.js examples.

mkdir /root/node

cat <<EOF > node/challenge.js
// Imports the Google Cloud client library
const {Storage} = require('@google-cloud/storage')

// Globally unique bucket name (don't change this).
const bucketName = process.env.BUCKET_NAME


// An authenticated storage API client.
const storage = new Storage()

async function createBucket () {  
	// there is a method called "createBucket" on the "Storage"
	// class which takes the argument "bucketName".
	// create a bucket "bucketName".
}

createBucket()
EOF

# go examples.

mkdir /root/go

cat <<EOF > go/challenge.go
package main

import (
	"cloud.google.com/go/storage"
	"context"
	"fmt"
	"log"
	"os"
)

func main() {
	ctx := context.Background()

	projectID := os.Getenv("GOOGLE_CLOUD_PROJECT")

	client, err := storage.NewClient(ctx)
	if err != nil {
		log.Fatal(err)
	}

	name := os.Getenv("BUCKET_NAME")
	if err := create(client, projectID, name); err != nil {
		log.Fatal(err)
	}
	fmt.Printf("created bucket: %v\n", name)
}

func create(client *storage.Client, projectID, bucketName string) error {
	ctx := context.Background()
	// Using the methods: "client.Bucket" and
	// "bucket.Create(ctx, projectID, &storage.BucketAttrs{})",
	// create a bucket named "bucketName".
	return nil
}
EOF

# challenge validation scripts.

cat <<EOF > /usr/local/lib/goog/bin/require-n-buckets.js
const {Storage} = require('@google-cloud/storage');
const storage = new Storage();
const n = Number(process.argv[2])
async function listBuckets () {
    const [buckets] = await storage.getBuckets();
    if (buckets.length < n) {
        console.error('expected ' + n + ' buckets, got ' + buckets.length)
        process.exit(1)
    }
}
listBuckets()
EOF

#python challenge

mkdir /root/python

cat <<EOF > python/challenge.py
import os
from google.cloud import storage

def create_bucket():
  storage_client = storage.Client()
  bucket_name = os.environ['BUCKET_NAME']
  # using the method "create_bucket" on "storage_client",
  # which takes the argument "bucket_name", create a
  # cloud storage bucket.

if __name__ == "__main__":
    create_bucket()

EOF

cat <<EOF > /usr/local/bin/run-all
#!/bin/bash --login
cd /root/node && node challenge.js &>/dev/null
cd /root/python && python3 challenge.py &>/dev/null
cd /root/go && /usr/local/bin/go run challenge.go &>/dev/null
exit 0
EOF
chmod 755 /usr/local/bin/run-all

# Remove hint in hard mode
if [[ "$INSTRUQT_DIFFICULTY" = "hard" ]]; then
    echo "If you need a hint, maybe you should try an EASIER difficulty ;-)" > /root/hint.txt
fi
