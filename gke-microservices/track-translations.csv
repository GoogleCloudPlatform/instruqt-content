key,en,ja,es
slug,gke-microservices,gke-microservices-japanese,gke-microservices-spanish
teaser,Are you a master of microservices?,,
description,"Kubernetes Engine is a managed, production-ready environment for deploying and managing containerized applications. It brings our latest innovations in developer productivity, resource efficiency, automated operations, and open source flexibility to accelerate your time to market.",,
namespace-assignment,"A GKE Cluster has been provisioned for you, and the **kubectl** CLI has been pre-authenticated.\n\nCreate a namespace called **challenge**",,
namespace-notes-1,"Google Kubernetes Engine is a **fully managed and enterprise grade** Kubernetes platform. \n\nWith Kubernetes Engine you can focus on deploying and managing **containerized microservices** while leaving the **node, network, and other low level maintenance** to Google.",,
namespace-notes-2,"Kubernetes Engine is a **Certified Kubernetes** platform with many additional features designed to give you the power and flexibility you need. \n\nFrom **built in autoscaling, VPC native networking, global load balancing, and addons like Knative and Istio**, Kubernetes Engine gives you the tools you need to build **cloud native applications**.",,
namespace-notes-3,One of the most important concepts in Kubernetes is that of a **Namespace**. Namespaces are used to organize resources in your cluster.,,
deployment-assignment,"In the **challenge** namespace you previously created, create a **Deployment** called **frontend-deployment** that runs a single Pod with the **gcr.io/gke-arcade/challenge** image.\nThe Pod should be labeled with **role = frontend**.\nThere is a partial file called `deployment.yaml` that has been created for you to use.",,
deployment-notes-1,"One of the fundamental building blocks of Kubernetes is the **Pod**. Pods are a group of one or more containers that are scheduled together, for example a web server and a log collector.",,
deployment-notes-2,"Pods are scheduled onto the cluster with a scheduler. The most common scheduler is a **Deployment**. Deployments let you run, scale, and update your Pods in a declarative fashion.",,
service-assignment,"In the **challenge** namespace you previously created, create a **Service** called **frontend-service** of type **LoadBalancer** that routes traffic from port 80 to port 3000 of the pods in the `frontend-deployment` Deployment.\n\n(remember, the pods are labeled ""role = frontend"")\n\ncURL the exposed service, and save the output of the service to a file called **output.txt**\n\nThere is another partial file called `service.yaml` that has been created for you to use.",,
service-notes-1,"While Deployments run your containers, **Services** tie them all together. Services act a service discovery and load balancing endpoints for your microservices. \nThis allows you to run multiple copies of your app without worrying about how other microservices in the cluster will find them.",,
service-notes-2,"Services also let you create Network Load Balancers on GCP, allowing you to expose your microservices directly to the world behind an automatically configured and scalable load balancer.",,
configmaps-secrets-assignment,"In the **challenge** namespace you previously created, create a **ConfigMap** called **prod-configmap** with a key named **username** with _any value_.\n\nThen create a **generic Secret** called **prod-secret** with a key named **password** with _any value_ in the **challenge namespace**.",,
configmaps-secrets-notes-1,Running your containers is just the tip of the iceberg when it comes to Kubernetes. Configuring and managing your app is equally important. Kubernetes provides two powerful config management primitives out of the box: **ConfigMaps** and **Secrets**,,
configmaps-secrets-notes-2,"Kubernetes **ConfigMaps** allow you to decouple configuration artifacts from image content to keep containerized applications portable. ConfigMaps allow environment specific data and files to be injected into your containers at runtime, allowing containers to be reused more easily.",,
configmaps-secrets-notes-3,"Kubernetes **Secrets** are similar, except they are for storing confidential information.",,
combined-assignment,"Update the **frontend-deployment** Deployment to have an **environment variable** called **USERNAME** that gets its value from the ConfigMap you created, and another environment variable called **PASSWORD** that gets is value from the Secret you created. \n\n cURL the exposed service, and save the output of the service to a file called **finished.txt**\n\nThe `deployment.yaml` file has been updated for you to use.",,