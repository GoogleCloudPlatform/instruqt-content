#!/bin/bash
# Copyright 2019 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
kubectl label namespace default time=$(date '+%s') --overwrite # mark cluster as still used

EXTERNAL_IP=$(kubectl get service app -n challenge -o jsonpath="{.status.loadBalancer.ingress[*].ip}")
OUTPUT=$(curl -s $EXTERNAL_IP)

cat <<EOF > /root/.instruqt/help.txt
You can see that your app is now serving traffic on a public IP address!

$OUTPUT

While it looks slick, you can see that the username and password we created aren't being used!

Update the "frontend-deployment" Deployment to have an environment variable called "USERNAME" that gets its value from the ConfigMap you created, and another environment variable called "PASSWORD" that gets is value from the Secret you created.

cURL the exposed service, and save the output of the service to a file called finished.txt

The `deployment.yaml` file has been updated for you to use again.

EOF

cat <<EOF > /root/.instruqt/hint.txt

Open the 'deployment.yaml' file that was created for you.

For the first name, use 'USERNAME'. This tells Kubernetes what the environment variable will be called.
For the ConfigMap name, use 'prod-configmap'. This tells Kubernetes which ConfigMap to look in.
For the ConfigMap key, use 'username'. This tells Kubernetes which key in the ConfigMap to use.

For the second name, use 'PASSWORD'. This tells Kubernetes what the environment variable will be called.
For the Secret name, use 'prod-secret'. This tells Kubernetes which Secret to look in.
For the Secret key, use 'username'. This tells Kubernetes which key in the Secret to use.

Save the file, and deploy it with:

'kubectl apply -f deployment.yaml'

Now, get the External IP address of your service:

'kubectl get service frontend-service --namespace challenge'

Then, curl the output and save it to finished.txt

EOF

set-workdir /home

cat <<EOF > /home/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: challenge
  name: frontend-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      role: frontend
  template:
    metadata:
      labels:
        role: frontend
    spec:
      containers:
      - image: gcr.io/gke-arcade/challenge
        name: app
        ports:
          - name: http
            containerPort: 3000
        env:
        - name: <?>
          valueFrom:
            configMapKeyRef:
              name:  <?>
              key:  <?>
        - name: <?>
          valueFrom:
            secretKeyRef:
              name: <?>
              key:  <?>
EOF

cat <<EOF > /root/.instruqt/.customenv
URL=$EXTERNAL_IP
EOF