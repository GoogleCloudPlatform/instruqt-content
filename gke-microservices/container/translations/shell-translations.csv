key,en,pt,es,zh-cn,ko,zh-tw
NAMESPACE_HELP,"A GKE Cluster has been provisioned for you, and the kubectl CLI has been pre-authenticated.
Create a namespace called 'challenge' in this cluster.","Um cluster do GKE foi provisionado, e a CLI kubectl foi pré-autenticada.
Crie um namespace chamado **challenge** nesse cluster.","Hemos aprovisionado un clúster de GKE para que lo utilices, además de preautenticar la interfaz de línea de comandos (CLI) ""kubectl"".
Crea un espacio de nombres llamado ""challenge"" en este clúster.",已为您预配了一个 GKE 集群，并且已预先对 kubectl CLI 进行了身份验证。在此集群中创建一个名为“challenge”的命名空间。,"GKE 클러스터가 프로비저닝되어 있고 kubectl CLI가 미리 인증되어 있습니다.
이 클러스터에서 'challenge'라는 네임스페이스를 만드세요.","我們為您佈建了 GKE 叢集，並已預先驗證 kubectl CLI。
請在這個叢集中建立名為「challenge」的命名空間。"
NAMESPACE_HINT,"The kubectl cli can be used to create namespaces.
You can do this with: kubectl create namespace <NAME OF NAMESPACE>
To create a namespace called 'challenge', run:
kubectl create namespace challenge","A CLI kubectl pode ser usada para gerar namespaces.
É possível fazer isso usando o comando: kubectl create namespace <NAME OF NAMESPACE>
Para criar um namespace chamado ""challenge"", execute:
kubectl create namespace challenge","A la hora de crear espacios de nombres, puedes usar la CLI ""kubectl"".
Para hacerlo, usa el siguiente comando: kubectl create namespace <NOMBRE DEL ESPACIO DE NOMBRES>
Para crear un espacio de nombres denominado ""challenge"", ejecuta lo siguiente:
kubectl create namespace challenge","可使用 kubectl cli 创建命名空间。
您可以使用以下命令执行此操作：kubectl create namespace <命名空间的名称>
要创建名为“challenge”的命名空间，请运行如下命令：
kubectl create namespace challenge","kubectl cli를 사용하여 네임스페이스를 만들 수 있습니다.
이를 위한 명령어는 kubectl create namespace <NAME OF NAMESPACE>입니다.
'challenge'라는 네임스페이스를 만들려면 다음 명령어를 실행하세요.
kubectl create namespace challenge","您可以使用 kubectl CLI 來建立命名空間。
您可以使用以下指令執行這項操作：kubectl create namespace <命名空間名稱>
如要建立名為「challenge」的命名空間，請執行 kubectl create namespace challenge"
NAMESPACE_FAIL,Could not find a namespace called 'challenge'. Type 'hint' if you are stuck.,"Não foi possível encontrar o namespace ""challenge"". Digite ""hint"" caso precise de ajuda.","No se ha encontrado el espacio de nombres denominado ""challenge"". Si necesitas ayuda al respecto, escribe ""hint"".",找不到名为“challenge”的命名空间。如果您不知道如何操作，请输入“hint”获取提示。,challenge'라는 네임스페이스를 찾을 수 없습니다. 문제 해결이 어려우면 'hint'를 입력하세요.,找不到名為「challenge」的命名空間。遇到問題時，您可以輸入「hint」。
DEPLOYMENT_HELP,"
In the 'challenge' namespace you previously created, create a Deployment called 'frontend-deployment' that runs a single Pod with the 'gcr.io/gke-arcade/challenge' image.

The Pod should be labeled with 'role = frontend'.

There is a partial file called deployment.yaml that has been created for you to use.
","
No namespace ""challenge"" criado anteriormente, inclua um Deployment chamado ""frontend-deployment"" que execute um único pod com a imagem ""gcr.io/gke-arcade/challenge"".

O rótulo do pod precisa ser ""role = frontend"".

Você pode usar um arquivo parcial chamado ""deployment.yaml"".
","
En el espacio de nombres ""challenge"" que mencionamos antes, crea un despliegue denominado ""frontend-deployment"" que ejecute un único pod con la imagen ""gcr.io/gke-arcade/challenge"".

Debes asignar la etiqueta ""role = frontend"" a este pod.

Hemos creado un archivo parcial denominado ""deployment.yaml"" para que puedas usarlo.
","
在您之前创建的“challenge”命名空间中，创建一个名为“frontend-deployment”、运行使用“gcr.io/gke-arcade/challenge”映像的单个 Pod 的部署。

此 Pod 应具有“role = frontend”标签。

系统创建了一个名为“deployment.yaml”的部分文件供您使用。
","
이전에 만든 'challenge' 네임스페이스에서 'gcr.io/gke-arcade/challenge' 이미지로 단일 Pod를 실행하는 'frontend-deployment'라는 Deployment를 만드세요.

Pode는 'role = frontend'로 라벨이 지정되어야 합니다.

deployment.yaml이라는 부분 파일도 사용할 수 있도록 만들어져 있습니다.
","
請在您稍早建立的「challenge」命名空間中建立名為「frontend-deployment」的 Deployment。這項 Deployment 會透過「gcr.io/gke-arcade/challenge」映像檔執行一個 pod。

不過，請務必為該 pod 加上「role = frontend」標籤。

我們已為您建立名為 deployment.yaml 的局部檔案，可供您使用。
"
DEPLOYMENT_HINT,"
Open the 'deployment.yaml' file that was created for you.

For the namepsace, use 'challenge'. This tells Kubernetes which namespace to deploy to.
For the metadata name, use 'frontend-deployment'. This determins the name of the Deployment.
For replicas, use '1'. This tells Kubernetes how many copies of your app to run.
For the matchLabels, use 'role: frontend'. This tells Kubernetes what pods this Deployment controls.
For the template metadata labels, use 'role: frontend'. This gives the Pods created by this Deployment the label 'role = frontend'.
For the image, use 'gcr.io/gke-arcade/challenge'. This tells the Pods which Docker container to run.

Create the deployment by running:

'kubectl apply -f deployment.yaml'
","
Abra o arquivo ""deployment.yaml"" criado.

Chame o namespace de ""challenge"". Isso informa ao Kubernetes qual namespace implantar.
Nomeie os metadados como ""frontend-deployment"". Isso determina o nome do Deployment.
Use ""1"" para as réplicas. Isso informa ao Kubernetes quantas cópias do seu app serão executadas.
Para matchLabels, use ""role: frontend"". Isso informa ao Kubernetes quais pods são controlados por esse Deployment.
Nos rótulos dos metadados do modelo, use ""role: frontend"". Isso fornece o rótulo ""role = frontend"" aos pods criados por esse Deployment.
Use ""gcr.io/gke-arcade/challenge"" para a imagem. Isso informa aos pods qual contêiner do Docker executar.

Crie a implantação executando:

'kubectl apply -f deployment.yaml'
","
Abre el archivo ""deployment.yaml"" que hemos creado.

En el espacio de nombres, introduce ""challenge"" para que Kubernetes sepa en cuál de ellos debe realizar el despliegue.
En el nombre de los metadatos, introduce ""frontend-deployment"". Este valor indica el nombre del despliegue.
En las réplicas, indica ""1"". De este modo, Kubernetes sabrá cuántas copias de tu aplicación debe ejecutar.
En matchLabels, indica ""role: frontend"". De este modo, Kubernetes sabrá qué pods controla este despliegue.
En la plantilla de etiquetas de metadatos, indica ""role: frontend"". Esta acción asigna la etiqueta ""role = frontend"" a los pods que cree este despliegue.
En la imagen, indica ""gcr.io/gke-arcade/challenge"". De esta forma, los pods sabrán qué contenedor Docker deben ejecutar.

Para crear el despliegue, ejecuta el siguiente comando:

kubectl apply -f deployment.yaml
","
打开为您创建的“deployment.yaml”文件。

对于 namespace，使用“challenge”。这会告诉 Kubernetes 部署到哪个命名空间。
对于 metadata，使用“frontend-deployment”。这可确定该部署的名称。
对于 replicas，使用“1”。这会告诉 Kubernetes 要运行您的应用的几个副本。
对于 matchLabels，使用“role: frontend”。这会告诉 Kubernetes 此部署控制哪些 Pod。
对于 template metadata，使用“role: frontend”。这可为由此部署创建的 Pod 设置“role = frontend”标签。
对于 image，使用“gcr.io/gke-arcade/challenge”。这会告诉 Pod 运行哪个 Docker 容器。

运行以下命令来创建部署：

kubectl apply -f deployment.yaml
","
생성된 'deployment.yaml' 파일을 여세요.

네임스페이스에 'challenge'를 사용하세요. 그러면 Kubernetes에 배포할 네임스페이스가 지정됩니다.
메타데이터 이름에는 'frontend-deployment'를 사용하세요. 그러면 Deployment 이름이 결정됩니다.
복제본에는 '1'을 사용하세요. 그러면 Kubernetes에 실행할 앱 사본 수가 지정됩니다.
matchLabels에는 'role: frontend'를 사용하세요. 그러면 Kubernetes에 이 Deployment로 제어할 pod가 지정됩니다.
템플릿 메타데이터 라벨에는 'role: frontend'를 사용하세요. 그러면 이 Deployment로 생성된 Pod에 'role = frontend' 라벨이 지정됩니다.
이미지에는 'gcr.io/gke-arcade/challenge'를 사용하세요. 그러면 Docker 컨테이너가 실행할 Pod가 지정됩니다.

다음 명령어를 실행하여 배포를 만드세요.

'kubectl apply -f deployment.yaml'
","
請開啟系統為您建立的「deployment.yaml」檔案。

請使用「challenge」這個命名空間。這項操作會向 Kubernetes 指明部署作業的目標命名空間。
請使用「frontend-deployment」這個中繼資料名稱。這個名稱會決定 Deployment 的名稱。
請使用「1」這項備用資源。這項操作會向 Kubernetes 指明要執行的應用程式副本數量。
請使用「role: frontend」這個 matchLabels。這項操作會向 Kubernetes 指明這項 Deployment 控管的 pod。
請使用「role: frontend」這個範本中繼資料標籤。這項操作會為這項 Deployment 建立的 pod 提供「role = frontend」標籤。
請使用「gcr.io/gke-arcade/challenge」這個映像檔。這項操作會向相關 pod 指明要執行的 Docker 容器。

執行下列指令來建立 Deployment：

'kubectl apply -f deployment.yaml'
"
DEPLOYMENT_FAIL_NO_DEPLOYMENT,Could not find Deployment called 'frontend-deployment' in the namespace 'challenge'. Type 'hint' if you are stuck.,"Não foi possível encontrar um Deployment chamado ""frontend-deployment"" no namespace ""challenge"". Digite ""hint"" caso precise de ajuda.","No se ha encontrado el despliegue denominado ""frontend-deployment"" en el espacio de nombres ""challenge"". Si necesitas ayuda al respecto, escribe ""hint"".",在命名空间“challenge”中找不到名为“frontend-deployment”的部署。如果您不知道如何操作，请输入“hint”获取提示。,challenge' 네임스페이스에서 'frontend-deployment'라는 Deployment를 찾을 수 없습니다. 문제 해결이 어려우면 'hint'를 입력하세요.,無法在「challenge」命名空間中找到名為「frontend-deployment」的 Deployment。遇到問題時，您可以輸入「hint」。
DEPLOYMENT_FAIL_NO_TAG,Pods in the Deployment are not labeled with 'role=frontend'. Type 'hint' if you are stuck.,"Os pods no Deployment não estão rotulados como ""role=frontend"". Digite ""hint"" caso precise de ajuda.","Los pods del despliegue no tienen asignada la etiqueta ""role=frontend"". Si necesitas ayuda al respecto, escribe ""hint"".",该部署中的 Pod 不具备“role=frontend”标签。如果您不知道如何操作，请输入“hint”获取提示。,Deployment에 있는 Pod에 'role=frontend' 라벨이 지정되지 않았습니다. 문제 해결이 어려우면 'hint'를 입력하세요.,Deployment 中的 pod 不含「role = frontend」標籤。遇到問題時，您可以輸入「hint」。
SERVICE_HELP,"
In the ""challenge"" namespace you previously created, create a Service called ""frontend-service"" of type ""LoadBalancer"" that routes traffic from port 80 to port 3000 of the pods in the 'frontend-deployment' Deployment.

(remember, the pods are labeled ""role = frontend"")

cURL the exposed service, and save the output of the service to a file called output.txt

There is another partial file called 'service.yaml' that has been created for you to use.
","
No namespace ""challenge"" criado anteriormente, inclua um Service chamado ""frontend-service"" do tipo ""LoadBalancer"" que encaminhe o tráfego da porta 80 para a porta 3000 dos pods no Deployment ""frontend-deployment"".

Lembre-se de que os pods são rotulados como ""role = frontend"".

Crie um cURL para o serviço publicado e salve a saída em um arquivo chamado output.txt.

Você também pode usar outro arquivo parcial chamado ""service.yaml"".
","
En el espacio de nombres ""challenge"" del que ya dispones, crea un servicio llamado ""frontend-service"" de tipo ""LoadBalancer"" para dirigir el tráfico del puerto 80 al puerto 3000 de los pods del despliegue ""frontend-deployment"".

Recuerda que la etiqueta asignada a los pods es ""role = frontend"".

Utiliza el comando cURL en el servicio que se expone y guarda el resultado en un archivo llamado **output.txt**.

También hemos creado el archivo parcial ""service.yaml"" para que puedas usarlo.
","在您之前创建的“challenge”命名空间中，创建一项名为“frontend-service”、类型为“LoadBalancer”的服务，用于将端口 80 上的流量路由到“frontend-deployment”部署中的 Pod 的端口 3000。

（请记住，这些 Pod 具有“role = frontend”标签）

对公开的服务运行 cURL 命令，并将服务的输出保存至一个名为 output.txt 的文件

系统还创建了一个名为“service.yaml”的部分文件供您使用。
","
이전에 만든 'challenge' 네임스페이스에서 'frontend-deployment' Deployment에 있는 pod의 포트 80에서 포트 3000으로 트래픽을 라우팅하는 'LoadBalancer' 유형의 'frontend-service'라는 서비스를 만드세요.

(주의: pod는 'role = frontend' 라벨로 지정되어야 합니다.)

제공된 서비스를 cURL로 실행하고 서비스 출력을 output.txt라는 파일에 저장하세요.

'service.yaml'이라는 다른 부분 파일도 사용할 수 있도록 생성되어 있습니다.
","
請在您稍早建立的「challenge」命名空間中建立名為「frontend-service」的 Service。該項 Service 的類型為「LoadBalancer」，可用來將流量從「frontend-deployment」Deployment 中 pod 的通訊埠 80 轉送至通訊埠 3000。

請注意，這些 pod 已含「role = frontend」標籤。

使用 cURL 執行已公開發布的服務，並將該項服務的輸出內容儲存至名為 output.txt 的檔案

我們已為您建立另一個名為「service.yaml」的局部檔案，可供您使用。
"
SERVICE_HINT,"
Open the 'service.yaml' file that was created for you.

For the namepsace, use 'challenge'. This tells Kubernetes which namespace to deploy to.
For the metadata name, use 'frontend-service'. This determins the name of the Service.
For the selector, use 'role: frontend'. This tells Kubernetes to forward traffic to Pods with the label ""role"" set to ""frontend"".
For the port name, use '80'. This is the port we want to expose.
For the targetPort, use '3000'. This is the port the Pod is listening on.
For the type, use 'LoadBalancer'. This tells Kubernetes to provision a cloud load balancer.

Save the file, and deploy it with:

kubectl apply -f service.yaml

Now, get the External IP address of your service:

'kubectl get service frontend-service --namespace challenge'

Wait until the External IP goes from <pending> to an actual IP address. This means the load balancer is provisioned.

Then, curl the output and save it to finished.txt

curl -o output.txt <EXTERNAL_IP>
","
Abra o arquivo ""service.yaml"" criado.

Chame o namespace de ""challenge"". Isso informa ao Kubernetes qual namespace implantar.
Nomeie os metadados como ""frontend-service"". Isso determina o nome do Service.
Para o seletor, use ""role: frontend"". Isso informa ao Kubernetes para encaminhar o tráfego aos pods cujo rótulo ""role"" é definido como ""frontend"".
Use ""80"" para o nome da porta. Essa é a porta que queremos publicar.
Em targetPort, use ""3000"". Essa é a porta que está sendo detectada pelo pod.
Use ""LoadBalancer"" para o tipo. Isso solicita o provisionamento de um balanceador de carga na nuvem ao Kubernetes.

Salve o arquivo e implante-o usando o comando:

kubectl apply -f service.yaml

Agora verifique o endereço IP externo do seu serviço:

'kubectl get service frontend-service --namespace challenge'

Aguarde até que o IP externo passe de <pending> para um endereço IP real. Isso significa que o balanceador de carga foi provisionado.

Depois, crie um cURL para a saída e salve-a como finished.txt

curl -o output.txt <EXTERNAL_IP>
","
Abre el archivo ""service.yaml"" que hemos creado.

En el espacio de nombres, introduce ""challenge"" para que Kubernetes sepa en cuál de ellos debe realizar el despliegue.
En el nombre de los metadatos, introduce ""frontend-service"". Este valor indica el nombre del servicio.
En el selector, indica ""role: frontend"". De este modo, Kubernetes sabrá que debe dirigir el tráfico a los pods cuya etiqueta ""role"" tenga el valor ""frontend"".
En el nombre del puerto, introduce ""80"", ya que es el puerto que queremos mostrar.
En targetPort, indica ""3000"". Este es el puerto en el que escucha el pod.
En el tipo, introduce ""LoadBalancer"" para indicar a Kubernetes que debe aprovisionar un balanceador de carga en la nube.

Guarda el archivo y, luego, despliégalo con el siguiente comando:

kubectl apply -f service.yaml

A continuación, obtén la dirección IP externa de tu servicio de la siguiente forma:

kubectl get service frontend-service --namespace challenge

Mantente a la espera hasta que la IP externa deje de mostrar ""<pending>"" e indique la dirección IP en cuestión. Una vez hecho esto, sabrás que se ha aprovisionado el balanceador de carga.

Luego, utiliza el comando cURL en el resultado y guárdalo como ""finished.txt""

curl -o output.txt <IP_EXTERNA>
","
打开为您创建的“service.yaml”文件。

对于 namespace，使用“challenge”。这会告诉 Kubernetes 部署到哪个命名空间。
对于 metadata name，使用“frontend-service”。这可确定该服务的名称。
对于 selector，使用“role: frontend”。这会告诉 Kubernetes 将流量转发至标签“role”设置为“frontend”的 Pod。
对于 port 名称，使用“80”。这是我们希望公开的端口。
对于 targetPort，使用“3000”。这是 Pod 在上面执行侦听的端口。
对于 type，使用“LoadBalancer”。这会告诉 Kubernetes 配置一个云负载平衡器。

保存该文件，并使用以下命令部署服务：

kubectl apply -f service.yaml

现在，获取您的服务的外部 IP 地址：

kubectl get service frontend-service --namespace challenge

等待外部  IP 从 <pending> 变为实际的 IP 地址。这表示已配置该负载平衡器。

然后，对输入运行 cURL 命令并将其保存到 finished.txt

curl -o output.txt <EXTERNAL_IP>
","
생성된 'service.yaml' 파일을 여세요.

네임스페이스에 'challenge'를 사용하세요. 그러면 Kubernetes에 배포할 네임스페이스가 지정됩니다.
메타데이터 이름에는 'frontend-service'를 사용하세요. 그러면 서비스 이름이 결정됩니다.
선택기에는 'role: frontend'를 사용하세요. 그러면 Kubernetes가 'role'이 'frontend' 라벨로 설정된 Pod로 트래픽을 전달합니다.
포트 이름에 '80'을 사용하세요. 이것이 우리가 여기에서 제공하려는 포트 번호입니다.
targetPort에는 '3000'을 사용하세요. 이 포트에서 Pod가 리슨합니다.
유형에 'LoadBalancer'를 사용하세요. 그러면 Kubernetes가 클라우드 부하 분산기를 프로비저닝합니다.

파일을 저장하고 다음 명령어를 사용해 배포하세요.

kubectl apply -f service.yaml

이제 서비스의 외부 IP 주소를 가져오세요.

'kubectl get service frontend-service --namespace challenge'

외부 IP가 <pending>에서 실제 IP 주소로 이동할 때까지 기다리세요. 즉, 부하 분산기가 프로비저닝됩니다.

그런 후 출력을 curl하고 이를 finished.txt로 저장하세요.

curl -o output.txt <EXTERNAL_IP>
","
請開啟系統為您建立的「service.yaml」檔案。

請使用「challenge」這個命名空間。這項操作會向 Kubernetes 指明部署作業的目標命名空間。
請使用「frontend-service」這個中繼資料名稱。這個名稱會決定 Service 的名稱。
請使用「role: frontend」這個選取器。這項操作會向 Kubernetes 指明要將流量轉送至「role」標籤設為「frontend」的 pod。
請使用「80」這個通訊埠名稱。這是我們要公開發布的通訊埠。
請使用「3000」這個 targetPort。這是 pod 正在監聽的通訊埠。
請使用「LoadBalancer」這個類型。這項操作會向 Kubernetes 指明必須佈建雲端負載平衡器。

儲存檔案，然後使用下列指令來部署該檔案：

kubectl apply -f service.yaml

現在，請擷取服務的外部 IP 位址：

'kubectl get service frontend-service --namespace challenge'

等待外部 IP 從 <pending> 變為實際 IP 位址。這代表系統已佈建負載平衡器。

接著，請使用 curl 產生輸出內容，並儲存至 finished.txt

curl -o output.txt <EXTERNAL_IP>
"
SERVICE_FAIL_NO_SERVICE,Could not find Service called 'frontend-service' in the namespace 'challenge'. Type 'hint' if you are stuck.,"Não foi possível encontrar um Service chamado ""frontend-service"" no namespace ""challenge"". Digite ""hint"" caso precise de ajuda.","No se ha encontrado el servicio denominado ""frontend-service"" en el espacio de nombres ""challenge"". Si necesitas ayuda al respecto, escribe ""hint"".",命名空间“challenge”中找不到名为“frontend-service”的服务。如果您不知道如何操作，请输入“hint”获取提示。,challenge' 네임스페이스에서 'frontend-service'라는 서비스를 찾을 수 없습니다. 문제 해결이 어려우면 'hint'를 입력하세요.,無法在「challenge」命名空間中找到名為「frontend-service」的 Service。遇到問題時，您可以輸入「hint」。
SERVICE_FAIL_CONFIGURATION,Service is not configured correctly. Type 'hint' if you are stuck.,"O Service não foi configurado corretamente. Digite ""hint"" caso precise de ajuda.","El servicio no se ha configurado correctamente. Si necesitas ayuda al respecto, escribe ""hint"".",服务配置不正确。如果您不知道如何操作，请输入“hint”获取提示。,서비스가 올바르게 구성되지 않았습니다. 문제 해결이 어려우면 'hint'를 입력하세요.,Service 的設定不正確。遇到問題時，您可以輸入「hint」。
CONFIGMAP_HELP,"
In the ""challenge"" namespace you previously created, create a ConfigMap called ""prod-configmap"" with a key named ""username"" with any value.

Then create a generic Secret called ""prod-secret"" with a key named ""password"" with any value in the challenge namespace.
","
No namespace ""challenge"" criado anteriormente, inclua um ConfigMap chamado ""prod-configmap"" com uma chave denominada ""username"" de qualquer valor.

Em seguida, crie um generic Secret chamado ""prod-secret"" com uma chave ""password"" de qualquer valor no namespace ""challenge"".
","
En el espacio de nombres ""challenge"" del que ya dispones, crea un ConfigMap llamado ""prod-configmap"" con una clave denominada ""username"" con un valor cualquiera.

Luego, crea un secreto genérico llamado ""prod-secret"" con una clave denominada ""password"" con un valor cualquiera en el espacio de nombres ""challenge"".
","
在您之前创建的“challenge”命名空间中，创建一个名为“prod-configmap”的 ConfigMap，它具有值为任意值的“username”的键。

然后在 challenge 命名空间中创建一个名为“prod-secret”的常规 Secret，它具有值为任意值的“password”的键。
","
이전에 만든 'challenge' 네임스페이스에서 아무 값이나 포함된 'username'이라는 키를 사용해서 'prod-configmap'이라는 ConfigMap을 만드세요.

그런 후 challenge 네임스페이스에 있는 아무 값이나 포함된 'password'라는 키를 사용해서 'prod-secret'라는 일반 Secret을 만드세요.
","
請在您稍早建立的「challenge」命名空間中建立名為「prod-configmap」的 ConfigMap；使用的鍵名為「username」的鍵，可自行設定任意值。

接著，請在 challenge 命名空間中建立名為「prod-secret」的一般 Secret；使用的鍵名為「password」，可自行設定任意值。
"
CONFIGMAP_HINT,"
The kubectl cli can be used to create ConfigMaps.

You can do this with: kubectl create configmap <NAME OF CONFIGMAP> <OPTIONS>

To create a ConfigMap called 'prod-configmap' and to create a key inside that ConfigMap called 'username', run:

'kubectl create configmap prod-configmap --from-literal=username=Your_Value_Here --namespace=challenge'

The kubectl cli can also be used to create Secrets.

You can do this with: kubectl create secret <TYPE OF SECRET> <NAME OF SECRET> <OPTIONS>

To create a Secret called 'prod-secret' and to create a key inside that Secret called 'password', run:

'kubectl create secret generic prod-secret --from-literal=password=Your_Value_Here --namespace=challenge'
","
A CLI kubectl pode ser usada para gerar ConfigMaps.

É possível fazer isso usando o comando: kubectl create configmap <NAME OF CONFIGMAP> <OPTIONS>

Para criar um ConfigMap chamado ""prod-configmap"" e uma chave ""username"" dentro dele, execute:

'kubectl create configmap prod-configmap --from-literal=username=Your_Value_Here --namespace=challenge'

A CLI kubectl também pode ser usada para gerar Secrets.

É possível fazer isso usando o comando: kubectl create secret <TYPE OF SECRET> <NAME OF SECRET> <OPTIONS>

Para criar um Secret chamado ""prod-secret"" e uma chave ""username"" dentro dele, execute:

'kubectl create secret generic prod-secret --from-literal=password=Your_Value_Here --namespace=challenge'
","
A la hora de crear ConfigMaps, puedes usar la CLI ""kubectl"".

Para hacerlo, usa el comando: kubectl create configmap <NOMBRE DEL CONFIGMAP> <OPCIONES>

Para crear un ConfigMap denominado ""prod-configmap"" y una clave en dicho ConfigMap denominada ""username"", ejecuta el siguiente comando:

kubectl create configmap prod-configmap --from-literal=username=Your_Value_Here --namespace=challenge

También puedes usar la CLI ""kubectl"" para crear secretos.

Para hacerlo, usa el siguiente comando: kubectl create secret <TIPO DE SECRETO> <NOMBRE DEL SECRETO> <OPCIONES>

Para crear un secreto llamado ""prod-secret"" y una clave en dicho secreto denominada ""password"", ejecuta este comando:

kubectl create secret generic prod-secret --from-literal=password=Your_Value_Here --namespace=challenge
","
kubectl cli 可用于创建 ConfigMap。

您可使用以下命令执行此操作：kubectl create configmap <CONFIGMAP 的名称> <选项>

要创建名为“prod-configmap”的 ConfigMap，并在该 ConfigMap 中创建名为“username”的键，请运行以下命令：

kubectl create configmap prod-configmap --from-literal=username=Your_Value_Here --namespace=challenge

kubectl cli 还可用于创建 Secret。

您可使用以下命令执行此操作：kubectl create secret <SECRET 的类型> <SECRET 的名称> <选项>

要创建名为“prod-secret”的 Secret，并在该 Secret 中创建名为“password”的键，请运行以下命令：

kubectl create secret generic prod-secret --from-literal=password=Your_Value_Here --namespace=challenge
","
kubectl cli를 사용하여 ConfigMaps를 만들 수 있습니다.

이를 위한 명령어는 kubectl create configmap <NAME OF CONFIGMAP> <OPTIONS>입니다.

'prod-configmap'이라는 ConfigMap을 만들고 이 ConfigMap 내에서 'username'이라는 키를 만들려면 다음 명령어를 실행하세요.

'kubectl create configmap prod-configmap --from-literal=username=Your_Value_Here --namespace=challenge'

또한 kubectl cli를 사용하여 Secrets를 만들 수 있습니다.

이를 위한 명령어는 kubectl create secret <TYPE OF SECRET> <NAME OF SECRET> <OPTIONS>입니다.

'prod-secret'이라는 Secret을 만들고 이 Secret 내에 'password'라는 키를 만들려면 다음 명령어를 실행하세요.

'kubectl create secret generic prod-secret --from-literal=password=Your_Value_Here --namespace=challenge'
","
您可以使用 kubectl CLI 來建立 ConfigMap。

您可以使用下列指令來執行這項操作：kubectl create configmap <CONFIGMAP 的名稱> <選項>

如要建立名為「prod-configmap」的 ConfigMap，並在該 ConfigMap 中建立名為「username」的鍵，請執行：

'kubectl create configmap prod-configmap --from-literal=username=Your_Value_Here --namespace=challenge'

kubectl CLI 也可以用來建立 Secret。

您可以使用下列指令來執行這項操作：kubectl create secret <SECRET 的類型> <SECRET 的名稱> <選項>

如要建立名為「prod-secret」的 Secret，並在該 Secret 中建立名為「password」的鍵，請執行：

'kubectl create secret generic prod-secret --from-literal=password=Your_Value_Here --namespace=challenge'
"
CONFIGMAP_FAIL_NO_CONFIGMAP,Could not find ConfigMap called 'prod-configmap' in the namespace 'challenge'. Type 'hint' if you are stuck.,"Não foi possível encontrar um ConfigMap chamado ""prod-configmap"" no namespace ""challenge"". Digite ""hint"" caso precise de ajuda.","No se ha encontrado el ConfigMap denominado ""prod-configmap"" en el espacio de nombres ""challenge"". Si necesitas ayuda al respecto, escribe ""hint"".",在命名空间“challenge”中找不到名为“prod-configmap”的 ConfigMap。如果您不知道如何操作，请输入“hint”获取提示。,challenge' 네임스페이스에서 'prod-configmap'이라는 ConfigMap을 찾을 수 없습니다. 문제 해결이 어려우면 'hint'를 입력하세요.,無法在「challenge」命名空間中找到名為「prod-configmap」的 ConfigMap。遇到問題時，您可以輸入「hint」。
CONFIGMAP_FAIL_NO_USERNAME,Could not find ConfigMap called 'prod-configmap' with a key called 'username' in the namespace 'challenge'. Type 'hint' if you are stuck.,"Não foi possível encontrar no namespace ""challenge"" um ConfigMap chamado ""prod-configmap"" que contenha uma chave ""username"". Digite ""hint"" caso precise de ajuda.","No se ha encontrado el ConfigMap denominado ""prod-configmap"" con una clave llamada ""username"" en el espacio de nombres ""challenge"". Si necesitas ayuda al respecto, escribe ""hint"".",在命名空间“challenge”中找不到名为“prod-configmap”、键为“username”的 ConfigMap。如果您不知道如何操作，请输入“hint”获取提示。,challenge' 네임스페이스에서 'username'이라는 키가 사용된 'prod-configmap'이라는 ConfigMap을 찾을 수 없습니다. 문제 해결이 어려우면 'hint'를 입력하세요.,無法在「challenge」命名空間中找到名為「prod-configmap」並具備「username」鍵的 ConfigMap。遇到問題時，您可以輸入「hint」。
CONFIGMAP_FAIL_NO_SECRET,Could not find Secret called 'prod-secret' in the namespace 'challenge'. Type 'hint' if you are stuck.,"Não foi possível encontrar um Secret chamado ""prod-secret"" no namespace ""challenge"". Digite ""hint"" caso precise de ajuda.","No se ha encontrado el secreto denominado ""prod-secret"" en el espacio de nombres ""challenge"". Si necesitas ayuda al respecto, escribe ""hint"".",在命名空间“challenge”中找不到名为“prod-secret”的 Secret。如果您不知道如何操作，请输入“hint”获取提示。,challenge' 네임스페이스에서 'prod-secret'이라는 Secret을 찾을 수 없습니다. 문제 해결이 어려우면 'hint'를 입력하세요.,無法在「challenge」命名空間中找到名為「prod-secret」的 Secret。遇到問題時，您可以輸入「hint」。
CONFIGMAP_FAIL_NO_PASSWORD,Could not find Secret called 'prod-secret' with a key called 'password' in the namespace 'challenge'. Type 'hint' if you are stuck.,"Não foi possível encontrar no namespace ""challenge"" um Secret chamado ""prod-secret"" que contenha uma chave ""password"". Digite ""hint"" caso precise de ajuda.","No se ha encontrado el secreto denominado ""prod-secret"" con una clave llamada ""password"" en el espacio de nombres ""challenge"". Si necesitas ayuda al respecto, escribe ""hint"".",在命名空间“challenge”中找不到名为“prod-secret”、键为“password”的 Secret。如果您不知道如何操作，请输入“hint”获取提示。,challenge' 네임스페이스에서 'password'라는 키가 사용된 'prod-secret'이라는 Secret을 찾을 수 없습니다. 문제 해결이 어려우면 'hint'를 입력하세요.,無法在「challenge」命名空間中找到名為「prod-secret」並具備「password」鍵的 Secret。遇到問題時，您可以輸入「hint」。
COMBINED_HELP_1,You can see that your app is now serving traffic on a public IP address!,Seu aplicativo agora está veiculando tráfego em um endereço IP público!,"Ahora, puedes ver que tu aplicación sirve el tráfico en una dirección IP pública.",您可以发现，您的应用现在已在公共 IP 地址上处理流量了！,이제 앱이 공개 IP 주소로 트래픽을 처리하는 것을 확인할 수 있습니다.,現在您的應用程式正在透過公開 IP 位址提供流量！
COMBINED_HELP_2,"While it looks slick, you can see that the username and password we created aren't being used!

Update the ""frontend-deployment"" Deployment to have an environment variable called ""USERNAME"" that gets its value from the ConfigMap you created, and another environment variable called ""PASSWORD"" that gets is value from the Secret you created.

cURL the exposed service, and save the output of the service to a file called finished.txt

The `deployment.yaml` file has been updated for you to use again.","Embora isso seja só um detalhe, o nome de usuário e a senha que criamos não estão sendo usados!

Atualize o Deployment ""frontend-deployment"" para gerar uma variável de ambiente chamada ""USERNAME"" que use o valor do ConfigMap que você criou e outra variável chamada ""PASSWORD"" que utilize o valor do Secret.

Crie um cURL para o serviço publicado e salve a saída em um arquivo chamado finished.txt.

O arquivo ""deployment.yaml"" foi atualizado.","Aunque el resultado tenga un aspecto profesional, verás que no se están usando ni el nombre de usuario ni la contraseña que se han creado.

Actualiza el despliegue ""frontend-deployment"" para tener una variable de entorno denominada ""USERNAME"" que obtenga su valor a partir del ConfigMap que has creado, y otra variable de entorno denominada ""PASSWORD"" que obtenga su valor a partir del secreto que creaste.

Utiliza el comando cURL en el servicio que se expone y guarda el resultado en un archivo llamado ""finished.txt""

Hemos actualizado el archivo ""deployment.yaml"" para que vuelvas a usarlo.","虽然看起来一切正常，但您会发现，我们创建的用户名和密码根本没用到。

更新“frontend-deployment”部署以设置一个名为“USERNAME”的环境变量（该变量从您创建的 ConfigMap 中获取值），以及另一个名为“PASSWORD”的环境变量（该变量从您创建的 Secret 中获取值）。

对公开的服务运行 cURL 命令，并将服务的输出保存到名为 finished.txt 的文件中

“deployment.yaml”已经更新以供您再次使用。","문제가 없어 보이지만, 여기에서 만든 사용자 이름과 비밀번호가 사용되지 않는 것을 확인할 수 있습니다.

사용자가 만든 ConfigMap에서 값을 가져오는 'USERNAME'이라는 환경 변수와 사용자가 만든 Secret에서 값을 가져오는 'PASSWORD'라는 또 다른 환경 변수가 포함되도록 'frontend-deployment' Deployment를 업데이트하세요.

제공된 서비스를 cURL로 실행하고 서비스 출력을 finished.txt라는 파일에 저장합니다.

다시 사용할 수 있도록 `deployment.yaml` 파일이 업데이트되었습니다.","雖然看起來一切順利，但您可以發現系統目前並未使用我們建立的使用者名稱和密碼！

請更新「frontend-deployment」Deployment，藉此取得名為「USERNAME」的環境變數，這項變數會從您建立的 ConfigMap 取得資料值，另一項名為「PASSWORD」的環境變數則會從您建立的 Secret 取得資料值。

請使用 cURL 執行已公開發布的服務，並將該項服務的輸出內容儲存至名為 finished.txt 的檔案

「deployment.yaml」檔案已更新完畢，可供您再次使用。"
COMBINED_HINT,"
Open the 'deployment.yaml' file that was created for you.

For the first name, use 'USERNAME'. This tells Kubernetes what the environment variable will be called.
For the ConfigMap name, use 'prod-configmap'. This tells Kubernetes which ConfigMap to look in.
For the ConfigMap key, use 'username'. This tells Kubernetes which key in the ConfigMap to use.

For the second name, use 'PASSWORD'. This tells Kubernetes what the environment variable will be called.
For the Secret name, use 'prod-secret'. This tells Kubernetes which Secret to look in.
For the Secret key, use 'username'. This tells Kubernetes which key in the Secret to use.

Save the file, and deploy it with:

'kubectl apply -f deployment.yaml'

Now, get the External IP address of your service:

'kubectl get service frontend-service --namespace challenge'

Then, curl the output and save it to finished.txt
","
Abra o arquivo ""deployment.yaml"" criado.

Use ""USERNAME"" como o primeiro nome. Isso informa ao Kubernetes o nome da variável de ambiente.
Use ""prod-configmap"" como o nome do ConfigMap. Isso informa ao Kubernetes qual ConfigMap procurar.
Para a chave do ConfigMap, use ""username"". Isso informa ao Kubernetes qual chave do ConfigMap usar.

Use ""PASSWORD"" como o segundo nome. Isso informa ao Kubernetes o nome da variável de ambiente.
Use ""prod-secret"" como o nome do Secret. Isso informa ao Kubernetes qual Secret procurar.
Para a chave do Secret, use ""username"". Isso informa ao Kubernetes qual chave do Secret usar.

Salve o arquivo e implante-o usando o comando:

'kubectl apply -f deployment.yaml'

Agora verifique o endereço IP externo do seu serviço:

'kubectl get service frontend-service --namespace challenge'

Depois, crie um cURL para a saída e salve-a como finished.txt
","
Abre el archivo ""deployment.yaml"" que hemos creado.

En el primer nombre, introduce ""USERNAME"". De este modo, Kubernetes sabrá cómo se llamará la variable de entorno.
En el nombre de ConfigMap, indica ""prod-configmap"" para que Kubernetes sepa en qué ConfigMap debe buscar.
En la clave del ConfigMap, indica ""username"". De esta manera, Kubernetes sabrá qué clave debe usar en el ConfigMap.

En el segundo nombre, introduce ""PASSWORD"" para que Kubernetes sepa cómo se llamará la variable de entorno.
En el nombre del secreto, indica ""prod-secret"". De este modo, Kubernetes sabrá en qué secreto debe buscar.
En la clave del secreto, indica ""username"" para que Kubernetes sepa qué clave del secreto debe usar.

Guarda el archivo y despliégalo con el siguiente comando:

kubectl apply -f deployment.yaml

A continuación, obtén la dirección IP externa de tu servicio de la siguiente forma:

kubectl get service frontend-service --namespace challenge

Luego, utiliza el comando cURL en el resultado y guárdalo como ""finished.txt"".
","
打开为您创建的“deployment.yaml”文件。

对于第一个 name，使用“USERNAME”。这会告诉 Kubernetes 该环境变量的名称是什么。
对于 ConfigMap name，使用“prod-configmap”。这会告诉 Kubernetes 查看哪个 ConfigMap。
对于 ConfigMap key，使用“username”。这会告诉 Kubernetes 使用 ConfigMap 中的哪个键。

对于第二个 name，使用“PASSWORD”。这会告诉 Kubernetes 该环境变量的名称是什么。
对于 Secret name，使用“prod-secret”。这会告诉 Kubernetes 查看哪个 Secret。
对于 Secret key，使用“username”。这会告诉 Kubernetes 使用 Secret 中的哪个键。

保存该文件，并使用以下名称对其进行部署：

kubectl apply -f deployment.yaml

现在，获取您的服务的外部 External IP 地址：

kubectl get service frontend-service --namespace challenge

然后，运行 curl 命令并将输出保存到 finished.txt
","
생성된 'deployment.yaml' 파일을 여세요.

첫 번째 이름에 'USERNAME'을 사용하세요. 그러면 Kubernetes에 호출할 환경 변수가 지정됩니다.
ConfigMap 이름에는 'prod-configmap'을 사용하세요. 그러면 Kubernetes에 조회할 ConfigMap이 지정됩니다.
ConfigMap 키에는 'username'을 사용하세요. 그러면 Kubernetes에 ConfigMap에서 사용할 키가 지정됩니다.

두 번째 이름에 'PASSWORD'를 사용하세요. 그러면 Kubernetes에 호출할 환경 변수가 지정됩니다.
Secret 이름에는 'prod-secret'을 사용하세요. 그러면 Kubernetes에 조회할 Secret이 지정됩니다.
Secret 키에는 'username'을 사용하세요. 그러면 Kubernetes에 Secret에서 사용할 키가 지정됩니다.

파일을 저장하고 다음 명령어를 사용해서 배포하세요.

'kubectl apply -f deployment.yaml'

이제 서비스의 외부 IP 주소를 가져오세요.

'kubectl get service frontend-service --namespace challenge'

그런 후 출력을 curl하고 이를 finished.txt로 저장하세요.
","
請開啟系統為您建立的「deployment.yaml」檔案。

請使用「USERNAME」來當做第一個名稱。這項操作會向 Kubernetes 指明環境變數要使用的名稱。
請使用「prod-configmap」這個 ConfigMap 名稱。這項操作會向 Kubernetes 指明要查看的 ConfigMap。
請使用「username」這個 ConfigMap 鍵。這項操作會向 Kubernetes 指明要使用的 ConfigMap 鍵。

請使用「PASSWORD」來當做第二個名稱。這項操作會向 Kubernetes 指明環境變數要使用的名稱。
請使用「prod-secret」這個 Secret 名稱。這項操作會向 Kubernetes 指明要查看的 Secret。
請使用「username」這個 Secret 鍵。這項操作會向 Kubernetes 指明要使用的 Secret 鍵。

儲存檔案，然後使用下列指令來部署該檔案：

'kubectl apply -f deployment.yaml'

現在，請擷取服務的外部 IP 位址：

'kubectl get service frontend-service --namespace challenge'

接著，請使用 curl 產生輸出內容，並儲存至 finished.txt
"
COMBINED_FAIL_ENV,Deployment does not have the environment variables properly defined. Type 'hint' if you are stuck.,"As variáveis de ambiente não foram definidas corretamente para o Deployment. Digite ""hint"" caso precise de ajuda.","Las variables de entorno del despliegue no están definidas correctamente. Si necesitas ayuda al respecto, escribe ""hint"".",部署的环境变量未正确定义。如果您不知道如何操作，请输入“hint”获取提示。,Deployment에는 올바르게 정의된 환경 변수가 없습니다. 문제 해결이 어려우면 'hint'를 입력하세요.,Deployment 的環境變數定義不正確。遇到問題時，您可以輸入「hint」。
COMBINED_FAIL_FILE, 'finished.txt' not found. Type 'hint' if you are stuck,"O ""finished.txt"" não foi encontrado. Digite ""hint"" caso precise de ajuda.","No se ha encontrado ""finished.txt"". Si necesitas ayuda al respecto, escribe ""hint"".",未找到“finished.txt”。如果您不知道如何操作，请输入“hint”获取提示, 'finished.txt'를 찾을 수 없습니다. 문제 해결이 어려우면 'hint'를 입력하세요.,找不到「finished.txt」。遇到問題時，您可以輸入「hint」