#!/bin/bash
kubectl label namespace default time=$(date '+%s') --overwrite # mark cluster as still used

EXTERNAL_IP=$(kubectl get service app -n challenge -o jsonpath="{.status.loadBalancer.ingress[*].ip}")
OUTPUT=$(curl -s $EXTERNAL_IP)

cat <<EOF > /root/help.txt
You can see that your app is now serving traffic on a public IP address!

$OUTPUT

While it looks slick, you can see that the username and password we created aren't being used!

Update the "app" Deployment to have an environment variable called "USERNAME" that gets its value from the ConfigMap you created, and another environment variable called "PASSWORD" that gets is value from the Secret you created.

cURL the exposed service, and save the output of the service to a file called finished.txt

If you need it, there is a template called 'deployment.yaml' that has been created for you. You don't need to use it though :)

EOF

cat <<EOF > /root/hint.txt

Open the 'deployment.yaml' file that was created for you.

For the first name, use 'USERNAME'. This tells Kubernetes what the environment variable will be called.
For the ConfigMap name, use 'app'. This tells Kubernetes which ConfigMap to look in.
For the ConfigMap key, use 'username'. This tells Kubernetes which key in the ConfigMap to use.

For the second name, use 'PASSWORD'. This tells Kubernetes what the environment variable will be called.
For the Secret name, use 'app'. This tells Kubernetes which Secret to look in.
For the Secret key, use 'username'. This tells Kubernetes which key in the Secret to use.

Save the file, and deploy it with:

kubectl apply -f deployment.yaml

Now, get the External IP address of your service:

kubectl get service app --namespace challenge

Then, curl the output and save it to finished.txt

curl -o finished.txt $EXTERNAL_IP

EOF

set-workdir /home

cat <<EOF > /home/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: challenge
  name: app
spec:
  replicas: 1
  selector:
    matchLabels:
      name: app
  template:
    metadata:
      labels:
        name: app
    spec:
      containers:
      - image: gcr.io/instruqt-shadow/challenge
        name: app
        ports:
          - name: http
            containerPort: 3000
        env:
        - name: <?>
          valueFrom:
            configMapKeyRef:
              name:  <?>
              key:  <?>
        - name: <?>
          valueFrom:
            secretKeyRef:
              name: <?>
              key:  <?>
EOF

cat <<EOF > /root/.customenv
URL=$EXTERNAL_IP
EOF